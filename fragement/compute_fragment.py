#!/usr/bin/env python
#-*- coding:utf-8 -*-
'''
这个代码对应论文中fragment部分的画图说明，所有数字均采用实际mbbo算法跑的，结果存储在 out_fragement.py
'''
import random 




a13 = [(0.657600937884552,  0.9364610837892438), (0.1663703688605187, 0.32106994929023613), (0.7587793907415603, 0.5586592486951679), (0.027134328534357377, 0.07844897357657224), (0.3393223917787965, 0.11592293003791501), (0.06671536641343767, 0.15804584669966987), (0.7440780868956809, 0.7817988102219253), (0.1680112630436046, 0.474571635934701), (0.07490368555183169, 0.09438683520811289), (0.10103012739045297, 0.37384928788292293), (0.41423856822106264, 0.45615378670883644), (0.9038021721359626, 0.6747933275551865), (0.43972489754743155, 0.22601645470114376)]
a71 = [(0.5071612021213469, 0.7537989360256818), (0.8273311753751371, 0.8169697902241941), (0.2868777213841789, 0.3919800855150611), (0.8277986274133068, 0.7453132043058961), (0.8859743564872007, 0.8693655736821749), (0.5272611590710334, 0.676729631946712), (0.9993073431470457, 0.9960209486019138)]
a72 = [(0.8343615853222104, 0.8200404530150576), (0.6728106328213879, 0.7051322506910498), (0.9248001938680004, 0.7622324850450435), (0.3935917932527518, 0.6114846588088086), (0.9716372401086896, 0.984219073546142), (0.12163161284970442, 0.6006900737215373), (0.942878526776505, 0.766379175473995)]
a6 = [(0.9745458308207491, 0.93925656296615), (0.6067228880297681, 0.810842167211074), (0.8818383965775611, 0.8285675470470157), (0.4557299430832139, 0.7557369560542349), (0.9939584444201619, 0.9556607115027549), (0.9489160820677952, 0.9601142255204043)]

def tmp(ll):
    ls = []
    out1 = 0.00
    out2 = 0.00
    theta = 0.005
    for c,m in ll:
        tmp1 = (1.00-c)*(1.00-m)
        tmp2 = 1.00 /( (1.00-c+theta) * (1.00-m+theta) )
        ls.append(tmp1)
        out1 += tmp1
        out2 += tmp2

    return out1, ls

if __name__ == '__main__':
    out_1, ls1 = tmp(a13)
    out_1 = 100 * 13 - 13 * out_1
    out_2, ls2 = tmp(a71)
    out_2 = 100 * 7 - 13 * out_2
    out_3, ls3 = tmp(a72)
    out_3 = 100 * 7 - 13 * out_3
    out_4, ls4 = tmp(a6)
    out_4 = 100 * 6 - 13 * out_4

    s0 = 'out_1 ={}\nout_2={}\nout_3={}\nout_4={}'.format(out_1,out_2,out_3,out_4)
    s1 = 'ls1={}\n ls2={}\n ls3={}\nls4={}\n{},{},{},{}'.format(ls1, ls2, ls3, ls4, sum(ls1), sum(ls2), sum(ls3), sum(ls4))
    
    # out_1c, out_1m = tmp(a13)
    # out_2c, out_2m = tmp(a71)
    # out_3c, out_3m = tmp(a72)
    # out_4c, out_4m = tmp(a6)
    # s0 = 'out_1c={}\nout_1m={}\nout_2c={}\nout_2m={}\nout_3c={}\nout_3m={}\nout_4c={}\nout_4m={}'.format(out_1c, out_1m, out_2c, out_2m, out_3c, out_3m, out_4c, out_4m)

    with open('addtion_phase//test.py','a') as f:
        f.flush()
        f.write(s0)
        f.write(s1)

 