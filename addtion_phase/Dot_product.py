#!/usr/bin/env python
#-*- coding:utf-8 -*-
'''
Date : 2017-11-15
@Author : Amy
Goal : saving host machines
Digest : 定义Dimension-aware herustics常见方法Dot-Product即通过多维向量间点积值作为bins、objects的排序标准，
      在本算法中为了更直观反应矢量装箱优化标准，采用以向量间夹角最小即cos值最大作为排序标准，再依据资源约束，
      循环求解vector bin pack结果
'''

import time
import random
import math



rp_option = [1.0]                      # vm可选的cpu尺寸
rm_option = [1.0]                      # vm可选的mem尺寸
               

def Dot_product(bins, objects):
    '''
    @param: bins 代表当前系统状态
            objects 代表待放入bin的容器
    @return: 安排好所有objects的集群bins状态
    '''

    print " \n 进入 FFDSum() 方法" 


    time0 = time.time()

    # d-v-h架构下新增阶段希望做到一定节能，即尽可能使用当前已有的VM，尽量不去开启新的HM
    # 情况1： 新增容器以VM作为直接node考虑，为当前所有可容纳running VM计算向量间夹角余弦值，值最高者放入
    # 情况2： all running vms均无法放入，init_VM产生新VM，再对所有HM计算与VM向量间夹角余弦值，值最高者放入

    for x in xrange(len(objects['c_rp'])):
        object_CPU, object_MEM, i = objects['c_rp'][x], objects['c_rm'][x], objects['replicas'][x]
        
        while i>0:
            # 对该object(容器)计算所有bins（VMs）得分
            weightedVMBins = weightVMBins(bins, object_CPU, object_MEM)

            # 至少有VM可以容纳该Object时，放入并更改参数
            if len(weightedVMBins) > 0:
                # 获取得分最多bins的编号
                vm_suffix = max(weightedVMBins, key=weightedVMBins.get)

                # 且该VM已经在当前集群中有映射HM
                if vm_suffix in bins['map_v_h']:
                    hm_suffix = bins['map_v_h'][vm_suffix]

                # 否则，需要为该VM找寻可以hosted 的HM,并更新资源
                else:
                    hm_suffix = find_HM(bins, bins['v_rp'][vm_suffix], bins['v_rm'][vm_suffix], vm_suffix)

                # 更新放入该object（容器）造成的bin（VM）资源变化
                bins['v_p_cost'][0][vm_suffix] += object_CPU
                bins['v_m_cost'][0][vm_suffix] += object_MEM
                
                # 将容器及其放置位置加入‘population’中
                bins['population'][0].append([vm_suffix, hm_suffix])
                bins['c_rp'].append(object_CPU)
                bins['c_rm'].append(object_MEM)

                # 已经解决掉一个object
                i -= 1 
                continue
                
            # 否则，当前集群没有能容纳该object（容器）的bin（VM）
            else:
                # 随机生成一个足以容纳该容器的VM, 获取编号
                vm = create_VM(object_CPU, object_MEM, rp_option, rm_option)
                vm_suffix = len(bins['v_p_cost'][0])

                # 为该VM找寻HM,并更新HM资源变动及map_v_h
                hm_suffix = find_HM(bins, vm['rp'], vm['rm'], vm_suffix)

                # 更新放入容器后造成的VM资源变化
                bins['v_p_cost'][0].append(object_CPU)
                bins['v_m_cost'][0].append(object_MEM)

                # 追加系统容器、vm数量及资源分布
                bins['c_rp'].append(object_CPU)
                bins['c_rm'].append(object_MEM)
                bins['v_rp'].append(vm['rp'])
                bins['v_rm'].append(vm['rm'])

                # 更新‘population’、‘map_v_h’
                bins['population'][0].append([vm_suffix, hm_suffix])

                # 已经解决掉一个object
                i -= 1
                continue

    # 说明性数据统计
    num = set(bins['map_v_h'].values())
    time1 = time.time()
    print "used time is {} \n used the number of HMs is {}".format(time1-time0, len(num))
    return bins




def find_HM(bins, v_rp, v_rm, vm_suffix):
    '''
    为VM找寻可容纳其的HM标号(系统已有/新增)，并更新所引起的hm资源编号，及map_v_h
    '''
    # 对集群已有的所有HMs进行打分
    weightedHMBins = weightHMBins(bins, v_rp, v_rm)

    # 更新得分最高的HM资源
    if len(weightedHMBins) > 0:
        hm_suffix = max(weightedHMBins, key=weightedHMBins.get)
        bins['h_p_cost'][0][hm_suffix] += v_rp
        bins['h_m_cost'][0][hm_suffix] += v_rm  
    # 更新新HM资源
    else:
        hm_suffix = len(bins['h_m_cost'][0])
        bins['h_p_cost'][0].append(v_rp)
        bins['h_m_cost'][0].append(v_rm)

    # 更新放入VM造成的新HM资源变化及map_v_h
    bins['map_v_h'][vm_suffix] = hm_suffix
    return hm_suffix



def weightVMBins(bins, object_CPU, object_MEM):
    '''
    计算集群bins(VMs)中所有bin reserved vector(非capacity vector)与object(docker) vector数量积，
    此处为了更为精细选用 2 vector的cos值最大，说明 2 vector之间夹角越小，对资源的牺牲度更为均衡。
    并返回weightedVMBins记录有各个node(VM) cos值得分的weightedVMBins
    '''
    print "\n 进入weightVMBins() 方法"

    weightedVMBins = {}
    for j in xrange(len(bins['v_p_cost'][0])):
        bin_reservedCPU = bins['v_rp'][j] - bins['v_p_cost'][0][j]
        bin_reservedMEM = bins['v_rm'][j] - bins['v_m_cost'][0][j]
        if bin_reservedCPU < object_CPU or bin_reservedMEM < object_MEM:
            continue
        cosScore = 1          # 即夹角最小0度
        if object_CPU > 0 and object_MEM > 0:
            # 2 vector数量积
            dotproduct = float(object_CPU * bin_reservedCPU + object_MEM * bin_reservedMEM)
            # object向量的模
            norm_object = object_CPU**2 + object_MEM**2
            # bin_reserved_resources向量的模
            norm_bin = bin_reservedCPU**2 + bin_reservedMEM**2
            # bins cos得分
            cosScore = dotproduct / math.sqrt(norm_object*norm_bin)
        if cosScore <= 1:
            weightedVMBins.setdefault(j, cosScore)
    return weightedVMBins


def weightHMBins(bins, object_CPU, object_MEM):
    '''
    计算集群bins(HMs)中所有bin reserved vector(非capacity vector)与object(VM) vector数量积，
    此处为了更为精细选用 2 vector的cos值最大，说明 2 vector之间夹角越小，对资源的牺牲度更为均衡。
    并返回weightedHMBins记录有各个node(HM) cos值得分的weightedHMBins
    '''
    print "\n 进入weightHMBins() 方法"

    weightedHMBins = {}
    for j in xrange(len(bins['h_p_cost'][0])):
        bin_reservedCPU = 1.0 - bins['h_p_cost'][0][j]
        bin_reservedMEM = 1.0 - bins['h_m_cost'][0][j]
        if bin_reservedCPU < object_CPU or bin_reservedMEM < object_MEM:
            continue
        cosScore = 1       # 即最大值，夹角为0度
        if object_CPU > 0 and object_MEM > 0:
            # 2 vector数量积
            dotproduct = float(object_CPU * bin_reservedCPU + object_MEM * bin_reservedMEM)
            # object向量的模
            norm_object = object_CPU**2 + object_MEM**2
            # bin_reserved_resources向量的模
            norm_bin = bin_reservedCPU**2 + bin_reservedMEM**2
            # bins cos得分
            cosScore = dotproduct / math.sqrt(norm_object*norm_bin)
        if cosScore <= 1:
            weightedHMBins.setdefault(j, cosScore)
    return weightedHMBins


def create_VM(c_rp, c_rm, rp_option, rm_option):
    '''
    依据实验可选的VM尺寸(rp_option、rm_option)随机生成可以容纳(c_rp、c_rm)的VM
    '''
    print "\n 进入 create_VM() 方法"

    vm = {'rp':0, 'rm':0}
    while vm['rp'] == 0:
        rp = random.choice(rp_option)
        rm = random.choice(rm_option)
        if rp >= c_rp and rm >= c_rm:
            vm['rp'],vm['rm'] = rp,rm
    return vm




if __name__ == '__main__':
    '''
    本模块测试算法是否运行正确
    '''
    # test 1
    # init_popu = {
    #     'c_rp': [0.4697016305356679, 0.29431926378647033, 0.22970477648767457, 0.32036803645328127, 0.4811686577824706, 0.39630054137437853, 0.1609631404578878, 0.2755880033213779, 0.38151011814458446, 0.023876102751119344],
    #     'c_rm': [0.280698996006043, 0.3440203847852634, 0.00011105303698105695, 0.2985981849500239, 0.4261539194747088, 0.333748152269725, 0.20113407453783236, 0.3387976831408542,0.45844925092062805, 0.07975242436510899],
    #     'v_rp': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    #     'v_rm': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    #     'population': [[[0, 9], [2, 3], [7, 8], [0, 9], [1, 2], [2, 3], [1, 2], [4, 7], [6, 0], [7, 8]]],
    #     'v_p_cost': [[0.7900696669889491, 0.6421317982403584, 0.6906198051608489, 0, 0.2755880033213779, 0, 0.38151011814458446, 0.2535808792387939, 0, 0]],
    #     'v_m_cost': [[0.5792971809560669, 0.6272879940125412, 0.6777685370549884, 0, 0.3387976831408542, 0, 0.45844925092062805, 0.07986347740209004, 0, 0]],
    #     'h_p_cost': [[1.0, 0, 1.0, 1.0, 0, 0, 0, 1.0, 1.0, 1.0]],
    #     'h_m_cost': [[1.0, 0, 1.0, 1.0, 0, 0, 0, 1.0, 1.0, 1.0]],
    #     'map_v_h': {0: 9, 1: 2, 2: 3, 4: 7, 6: 0, 7: 8}
    #     }
    # addition0 = {
    #     'c_rp': [0.2534765051859606, 0.2948935628141042, 0.2224244890668316, 0.18127979201839872, 0.32156802827499703],
    #     'c_rm': [0.3020445793942861, 0.3768727547924075, 0.006082192833673228, 0.15746276310264423, 0.39400382229512343],
    #     'replicas': [4, 0, 4, 3, 0]
    # }

    #test2 init_main(10,1.0,50)
    # init_popu = {
    #     'c_rp': [0.49950862497815096, 0.49566299101104405, 0.19339860376391588, 0.22650079014580787, 0.4985697928665497, 0.23123095298795776, 0.08874821111583076, 0.21338379418561532, 0.19440106465844426,0.08929997048178007],
    #     'c_rm': [0.3909286789440798, 0.369809808223181, 0.00979746372201648, 0.025755088684076777, 0.33613683282363926, 0.09025060644602326, 0.03690588016174476, 0.1613365031750235, 0.1843056842347392, 0.1654617298885813],
    #     'v_rp': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    #     'v_rm': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
    #     'v_p_cost': [[0.19339860376391588, 0.4985697928665497, 0.49950862497815096, 0, 0.08929997048178007, 0.3199791641037885, 0.6900640556694884, 0.22650079014580787, 0, 0.21338379418561532]],
    #     'v_m_cost': [[0.00979746372201648, 0.33613683282363926, 0.3909286789440798, 0, 0.1654617298885813, 0.12715648660776802, 0.5541154924579201, 0.025755088684076777, 0, 0.1613365031750235]],
    #     'h_p_cost': [[0, 1.0, 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]],
    #     'h_m_cost': [[0, 1.0, 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]],
    #     'population': [[[2, 8], [6, 4], [0, 7], [7, 5], [1, 9], [5, 6], [5, 6], [9, 3], [6, 4], [4, 1]]],
    #     'map_v_h': {0: 7, 1: 9, 2: 8, 4: 1,5: 6, 6: 4, 7: 5, 9: 3}
    #     }
    # addition0 = {
    #     'c_rp': [0.11908248759706352, 0.2539499371680547, 0.020365365071704944, 0.3948180323801204, 0.16201211844666025, 0.09712859701028537, 0.31390062270434416, 0.3480375603464177, 0.15014449094820942, 0.04822244066927983, 0.3928791357646204, 0.032534810957771, 0.4651545189795368, 0.0474215706739573, 0.07162125780399875, 0.40903739793374416, 0.0539330604724928, 0.2355628289244136, 0.19700257808129235, 0.373566830122395, 0.17717460262217066, 0.43991572626550735, 0.37451472906275923, 0.3135592929534395,0.015668465353517125, 0.10403211142071572, 0.21390117473577447, 0.4713342566285714, 0.17040421305346137, 0.3260384854338912, 0.2244028315904087, 0.2312332531063797, 0.45247614392078866, 0.20553810157861957, 0.3064820365449853, 0.31058025758787433, 0.1650102907341277, 0.19784436750803397, 0.44271702585692496, 0.1435831818575356, 0.46550750164344235, 0.34333834380364575, 0.027396746345203393, 0.36407514538409447, 0.18766287048391472, 0.1881570123326235, 0.45031175220343606, 0.44156291337181935, 0.3881099941271592, 0.08966540806915951],
    #     'c_rm': [0.15371760989287112, 0.4727080131827223, 0.1312785397644661, 0.3148741699625581, 0.15490164061562212, 0.2188793775769965, 0.42599638018947206, 0.4296657758683523, 0.04960548585622013, 0.12163920336361042, 0.4155052522150541, 0.22584319726937863, 0.4298025137237217, 0.02073334664757892, 0.0406855119064691, 0.2899188786601343, 0.13482466565478549, 0.1381986097950461, 0.12833142672404127, 0.47013534312111604, 0.15751054415325544, 0.45265496951228257, 0.31177491087859177, 0.4547144122615391, 0.2149583781080965, 0.002010100339807669, 0.23583146593132182, 0.2668389587972696, 0.023147288153819612, 0.49235190501873116, 0.11524643818001151, 0.10224202413249506, 0.39278777898283634, 0.021373650453562182, 0.2750448545115652, 0.49570452049049685, 0.0463055590081595, 0.10080163807146658, 0.3602772552783736, 0.2452958069609209, 0.4291638547046067, 0.4994509837339639, 0.21256047037541928, 0.2802727216555664, 0.24083778776514506, 0.11761680222091694, 0.4740337239408656, 0.292596240387029, 0.37749334161166404, 0.1872898013788786],
    #     'replicas': [4, 5, 5, 0, 3, 4, 3, 4, 4, 2, 2, 2, 2, 2, 3, 3, 2, 4, 3, 2, 4, 0, 1, 5, 3, 5, 2, 2, 2, 2, 5, 3, 3, 2, 4, 0, 1, 1, 4, 0, 1, 4, 1, 1, 5, 4, 5, 1, 1, 2]
    #     }

    #test3 init_main(50,1.0,50)
    init_popu = {
        'c_rp': [0.3656248590857726, 0.03626850274379101, 0.1566372476678421, 0.3382259494269996, 0.007411313301504685, 0.08104553439103984, 0.24235130663415894, 0.07354095911475678, 0.11169303351205129, 0.1012027484074492, 0.05385762071997363, 0.3316503120316005, 0.25482713175394955, 0.14474771451494317, 0.21378117173700723, 0.1638389695469049, 0.28379990468714833, 0.2921744339666951, 0.17026863055576913, 0.45378813322955797, 0.1101643602503179, 0.22587025034000757, 0.19028444915746007, 0.16065122764116097, 0.19569668575535415, 0.29617851537983514, 0.3948374007384242, 0.18835813226893156, 0.10127975615943663, 0.21197727833324115, 0.3688473818989928, 0.16191975705828981, 0.17376321707052683, 0.40958890883376947, 0.04202595090636607, 0.04422103985948056, 0.22326766625639616, 0.4248368906443618, 0.07908009737868421, 0.3845431735384491, 0.04062162998919322, 0.3246838005966225, 0.01783690136694449, 0.029763741192829152, 0.1826639290717853, 0.37762445855304966, 0.1985854382021045, 0.3013690952125407, 0.47548967374926343, 0.44551748954209325],
        'c_rm': [0.3229176116753448, 0.05779823357792749, 0.007582567466609985, 0.3677795819270936, 0.23817055535134565, 0.10495563144891101, 0.0656212782633164, 0.17091000022036146, 0.1000074310617198, 0.17352781772347017, 0.039832014748863415, 0.3055940519551792, 0.29856567453630023, 0.15175471605525273, 0.19576112152689815, 0.07842292299376011, 0.28024449331417617, 0.4980273668902767, 0.11057425762093323, 0.47801221590099474, 0.08613362277878531, 0.03431044636040326, 0.12851384905052918, 0.24750236064581535, 0.04512171078363142, 0.2785256644088949, 0.2863905736800203, 0.09879195259914153, 0.1203586316938543, 0.0770161901592957, 0.31970982857323094, 0.1871293393817813, 0.206649659503299, 0.4419099232349848, 0.03982921245904816, 0.2079136982887979, 0.2318531848123239, 0.27301447635814025, 0.18348481898716812, 0.306896725965626, 0.04582964356063912, 0.33158763919568296, 0.028991496171371728, 0.13527799513601174, 0.062016937361908, 0.47428330271049535, 0.16215673513098805, 0.3727768171741238, 0.41860202786533773, 0.38636113540912154],
        'v_rp': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
        'v_rm': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
        'v_p_cost': [[0, 0, 0.3951567166581016, 0.3316503120316005, 0.6657468160617961, 0.07354095911475678, 0.40958890883376947, 0.1566372476678421, 0.08104553439103984, 0.22587025034000757, 0.6086185724754314, 0, 0, 0, 0.6131950229132934, 0.20003237174859828, 0, 0, 0.47548967374926343, 0.6364520623013432, 0.3845431735384491, 0, 0, 0.1101643602503179, 0, 0.7411684234885809, 0.3433331527170477, 0.10127975615943663, 0, 0, 0.21197727833324115, 0.09613135501710157, 0, 0, 0.61928070661262, 0.29617851537983514, 0.5154421002230913, 0.32884271731434783, 0.05385762071997363, 0.3382259494269996, 0.11169303351205129, 0, 0, 0.5414634280999546, 0, 0, 0.6669939542983132, 0, 0.3246838005966225, 0]],
        'v_m_cost': [[0, 0, 0.5839299079851424, 0.3055940519551792, 0.5383593570803326, 0.17091000022036146, 0.4419099232349848, 0.007582567466609985, 0.10495563144891101, 0.03431044636040326, 0.4821516952069185, 0, 0, 0, 0.3718064289572818, 0.24585225275694497, 0, 0, 0.41860202786533773, 0.5400291532629027, 0.306896725965626, 0, 0, 0.08613362277878531, 0, 0.8117691507928969, 0.31391145118624075, 0.1203586316938543, 0, 0, 0.0770161901592957, 0.12661894220834738, 0, 0, 0.5930107949124206, 0.2785256644088949, 0.7298805517026006, 0.4872766526018302, 0.039832014748863415, 0.3677795819270936, 0.1000074310617198, 0, 0, 0.5527062257042554, 0, 0, 0.6956944288494686, 0, 0.33158763919568296, 0]],
        'h_p_cost': [[0, 1.0, 1.0, 1.0, 1.0, 0, 0, 1.0, 0, 1.0, 0, 0, 0, 0, 1.0, 1.0, 0, 0, 1.0, 1.0, 1.0, 1.0, 0, 1.0, 0, 1.0, 1.0, 1.0, 0, 0, 0, 1.0, 1.0, 0, 1.0, 1.0, 1.0, 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0, 0, 1.0, 0, 1.0, 1.0]],
        'h_m_cost': [[0, 1.0, 1.0, 1.0, 1.0, 0, 0, 1.0, 0, 1.0, 0, 0, 0, 0, 1.0, 1.0, 0, 0, 1.0, 1.0, 1.0, 1.0, 0, 1.0, 0, 1.0, 1.0, 1.0, 0, 0, 0, 1.0, 1.0, 0, 1.0, 1.0, 1.0, 0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0, 0, 1.0, 0, 1.0, 1.0]],
        'population': [[[46, 48], [31, 20], [7, 36], [39, 46], [37, 41], [8, 26], [37, 41], [5, 25], [40, 2], [4, 23], [38, 18], [3, 39], [25, 27], [26, 21], [10, 19], [43, 35], [25, 27], [36, 40], [15, 9], [19, 38], [23, 34], [9, 1], [2, 15], [2, 15], [4, 23], [35, 32], [10, 19], [14, 14], [27, 4], [30, 49], [4, 23], [25, 27], [34, 42], [6, 31], [31, 20], [2, 15], [36, 40], [14, 14], [37, 41], [20, 43], [25, 27], [48, 3], [31, 20], [15, 9], [19, 38], [43, 35], [26, 21], [46, 48], [18, 7], [34, 42]]],
        'map_v_h': {2: 15, 3: 39, 4: 23, 5: 25, 6: 31, 7: 36, 8: 26, 9: 1, 10: 19, 14: 14, 15: 9, 18: 7, 19: 38, 20: 43, 23: 34, 25: 27, 26: 21, 27: 4, 30: 49, 31: 20, 34: 42, 35: 32, 36: 40, 37: 41, 38: 18, 39: 46, 40: 2, 43: 35, 46: 48, 48: 3}
        } 
    addition0 = {
        'c_rp': [0.07621333555780102, 0.46375821846763693, 0.13465225553760746, 0.04086304733562157, 0.1009779680067246, 0.4861803821505196, 0.3083357279536146, 0.1972044038328345, 0.43967331875511817, 0.3749542227647979, 0.09127180441537164, 0.2777042086525858, 0.25529236992911575, 0.37278780653861293, 0.4777007341657317, 0.09688727332539177, 0.09206909459447732, 0.03512152190484974, 0.012591695146030812, 0.28086418323881, 0.024439559275153788, 0.052596682108753345, 0.09575465882930984, 0.41892317505603666, 0.37726618084985447, 0.3194620944653095, 0.32417636088940677, 0.4669291725694947, 0.043900226109121476, 0.10800555344670743, 0.16291921650949343, 0.439013333519231, 0.3671037096048017, 0.4266674082354822, 0.0983949713346251, 0.4820309895683887, 0.03273512707628157, 0.40012086598502294, 0.3376801067629004, 0.36466895110733644, 0.4184007640974132, 0.4498523111618689, 0.2976061136525239, 0.40296823374806623, 0.2915279038244716, 0.3206797971971431, 0.31136679730970424, 0.20838283698030108, 0.25799541146012306, 0.2350945096810504],
        'c_rm': [0.1704308828834483, 0.3347032580788516, 0.08734440553580572, 0.08489406425855237, 0.20867808263144344, 0.45928162740129275, 0.32092476262321223, 0.12323201713986104, 0.25792986790385053, 0.36051545545685026, 0.009281777087353005, 0.42049519620793135, 0.4205257004673737, 0.28099429863131226, 0.41867072776772213, 0.1301750990650145, 0.20168889176440216, 0.04357330830335035, 0.044344186181650175, 0.3495285114799963, 0.007930630837274355, 0.22402493697626502, 0.02077526230974744, 0.3988718344336295, 0.27150335635906114, 0.3857366319005715, 0.3497797772888227, 0.39581659358574706, 0.22771251427994285, 0.01896244554253476, 0.19435957820896646, 0.27644858374192144, 0.25200406349278487, 0.29236682954734633, 0.016913401059894417, 0.3178951763307213, 0.1401664925043941, 0.40159104559406694, 0.334079925083034, 0.4615439815640866, 0.30262459333641717, 0.40652724430259235, 0.38626546217750213, 0.4977658750512899, 0.28511456161213616, 0.333602528471873, 0.28093320870298816, 0.005212665997561955, 0.45384151930347927, 0.2025538352130676],
        'replicas': [4, 3, 5, 5, 1, 5, 5, 4, 1, 0, 5, 3, 0, 3, 3, 3, 0, 4, 2, 1, 2, 2, 2, 4, 1, 2, 3, 1, 0, 2, 1, 5, 0, 2, 3, 3, 2, 5, 3, 5, 4, 1, 2, 4, 1, 4, 2, 2, 3, 4]
        } 


            
    s0 = 'Start: \n init_popu = {} \n addtion = {}'.format(init_popu, addition0)
    bins = Dot_product(init_popu, addition0)
    s1 = '\n\n End:   \n Bins = {}'.format(bins)    

#     with open('addtion_phase//check_error.py','a') as f:
#         f.flush()
#         f.write(s0)
#         f.write(s1)